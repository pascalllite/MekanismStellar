buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}
// Include resources generated by data generators.
sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

version = "${mod_version}"
group = 'mekanism'
archivesBaseName = 'Stellar'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of("${java_version}")
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        configureEach {
            workingDirectory project.file('run')
            mods {
                "stellar" {
                    source sourceSets.main
                }
            }
        }
        client {
        }
        server {
            args "--nogui"
        }
        gameTestServer {
        }
        data {
            property 'forge.logging.markers', 'REGISTRIES'

            environment 'target', 'fmluserdevdata'

            args '--mod', 'stellar', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

repositories {
    maven { url = "https://modmaven.dev" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("mekanism:Mekanism:${minecraft_version}-${mekanism_version}")
    implementation fg.deobf("mekanism:Mekanism:${minecraft_version}-${mekanism_version}:generators")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Mekanism Stellar",
                "Specification-Vendor"    : "Mekanism Stellar",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : "Mekanism Stellar",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "Mekanism Stellar",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            forge_version    : forge_version,
            version          : version,
            loader_version   : loader_version,
            mekanism_version : mekanism_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}